#pragma once
#ifndef SEAQT_QTWIDGETS_GEN_QTEXTEDIT_H
#define SEAQT_QTWIDGETS_GEN_QTEXTEDIT_H

#include <stdbool.h>
#include <stddef.h>
#include <stdint.h>

#pragma GCC diagnostic ignored "-Wdeprecated-declarations"

#include "../libseaqt/libseaqt.h"

#ifdef __cplusplus
extern "C" {
#endif

#ifdef __cplusplus
class QAbstractScrollArea;
class QActionEvent;
class QChildEvent;
class QCloseEvent;
class QColor;
class QContextMenuEvent;
class QDragEnterEvent;
class QDragLeaveEvent;
class QDragMoveEvent;
class QDropEvent;
class QEvent;
class QFocusEvent;
class QFont;
class QFrame;
class QHideEvent;
class QInputMethodEvent;
class QKeyEvent;
class QMargins;
class QMenu;
class QMetaMethod;
class QMetaObject;
class QMimeData;
class QMouseEvent;
class QMoveEvent;
class QObject;
class QPagedPaintDevice;
class QPaintDevice;
class QPaintEngine;
class QPaintEvent;
class QPainter;
class QPoint;
class QRect;
class QRegExp;
class QRegularExpression;
class QResizeEvent;
class QShowEvent;
class QSize;
class QStyleOptionFrame;
class QTabletEvent;
class QTextCharFormat;
class QTextCursor;
class QTextDocument;
class QTextEdit;
#if defined(WORKAROUND_INNER_CLASS_DEFINITION_QTextEdit__ExtraSelection)
typedef QTextEdit::ExtraSelection QTextEdit__ExtraSelection;
#else
class QTextEdit__ExtraSelection;
#endif
class QTimerEvent;
class QUrl;
class QVariant;
class QWheelEvent;
class QWidget;
#else
typedef struct QAbstractScrollArea QAbstractScrollArea;
typedef struct QActionEvent QActionEvent;
typedef struct QChildEvent QChildEvent;
typedef struct QCloseEvent QCloseEvent;
typedef struct QColor QColor;
typedef struct QContextMenuEvent QContextMenuEvent;
typedef struct QDragEnterEvent QDragEnterEvent;
typedef struct QDragLeaveEvent QDragLeaveEvent;
typedef struct QDragMoveEvent QDragMoveEvent;
typedef struct QDropEvent QDropEvent;
typedef struct QEvent QEvent;
typedef struct QFocusEvent QFocusEvent;
typedef struct QFont QFont;
typedef struct QFrame QFrame;
typedef struct QHideEvent QHideEvent;
typedef struct QInputMethodEvent QInputMethodEvent;
typedef struct QKeyEvent QKeyEvent;
typedef struct QMargins QMargins;
typedef struct QMenu QMenu;
typedef struct QMetaMethod QMetaMethod;
typedef struct QMetaObject QMetaObject;
typedef struct QMimeData QMimeData;
typedef struct QMouseEvent QMouseEvent;
typedef struct QMoveEvent QMoveEvent;
typedef struct QObject QObject;
typedef struct QPagedPaintDevice QPagedPaintDevice;
typedef struct QPaintDevice QPaintDevice;
typedef struct QPaintEngine QPaintEngine;
typedef struct QPaintEvent QPaintEvent;
typedef struct QPainter QPainter;
typedef struct QPoint QPoint;
typedef struct QRect QRect;
typedef struct QRegExp QRegExp;
typedef struct QRegularExpression QRegularExpression;
typedef struct QResizeEvent QResizeEvent;
typedef struct QShowEvent QShowEvent;
typedef struct QSize QSize;
typedef struct QStyleOptionFrame QStyleOptionFrame;
typedef struct QTabletEvent QTabletEvent;
typedef struct QTextCharFormat QTextCharFormat;
typedef struct QTextCursor QTextCursor;
typedef struct QTextDocument QTextDocument;
typedef struct QTextEdit QTextEdit;
typedef struct QTextEdit__ExtraSelection QTextEdit__ExtraSelection;
typedef struct QTimerEvent QTimerEvent;
typedef struct QUrl QUrl;
typedef struct QVariant QVariant;
typedef struct QWheelEvent QWheelEvent;
typedef struct QWidget QWidget;
#endif

struct QTextEdit_VTable {
	void (*destructor)(struct QTextEdit_VTable* vtbl, QTextEdit* self);
	QMetaObject* (*metaObject)(struct QTextEdit_VTable* vtbl, const QTextEdit* self);
	void* (*metacast)(struct QTextEdit_VTable* vtbl, QTextEdit* self, const char* param1);
	int (*metacall)(struct QTextEdit_VTable* vtbl, QTextEdit* self, int param1, int param2, void** param3);
	QVariant* (*loadResource)(struct QTextEdit_VTable* vtbl, QTextEdit* self, int type, QUrl* name);
	QVariant* (*inputMethodQuery)(struct QTextEdit_VTable* vtbl, const QTextEdit* self, int property);
	bool (*event)(struct QTextEdit_VTable* vtbl, QTextEdit* self, QEvent* e);
	void (*timerEvent)(struct QTextEdit_VTable* vtbl, QTextEdit* self, QTimerEvent* e);
	void (*keyPressEvent)(struct QTextEdit_VTable* vtbl, QTextEdit* self, QKeyEvent* e);
	void (*keyReleaseEvent)(struct QTextEdit_VTable* vtbl, QTextEdit* self, QKeyEvent* e);
	void (*resizeEvent)(struct QTextEdit_VTable* vtbl, QTextEdit* self, QResizeEvent* e);
	void (*paintEvent)(struct QTextEdit_VTable* vtbl, QTextEdit* self, QPaintEvent* e);
	void (*mousePressEvent)(struct QTextEdit_VTable* vtbl, QTextEdit* self, QMouseEvent* e);
	void (*mouseMoveEvent)(struct QTextEdit_VTable* vtbl, QTextEdit* self, QMouseEvent* e);
	void (*mouseReleaseEvent)(struct QTextEdit_VTable* vtbl, QTextEdit* self, QMouseEvent* e);
	void (*mouseDoubleClickEvent)(struct QTextEdit_VTable* vtbl, QTextEdit* self, QMouseEvent* e);
	bool (*focusNextPrevChild)(struct QTextEdit_VTable* vtbl, QTextEdit* self, bool next);
	void (*contextMenuEvent)(struct QTextEdit_VTable* vtbl, QTextEdit* self, QContextMenuEvent* e);
	void (*dragEnterEvent)(struct QTextEdit_VTable* vtbl, QTextEdit* self, QDragEnterEvent* e);
	void (*dragLeaveEvent)(struct QTextEdit_VTable* vtbl, QTextEdit* self, QDragLeaveEvent* e);
	void (*dragMoveEvent)(struct QTextEdit_VTable* vtbl, QTextEdit* self, QDragMoveEvent* e);
	void (*dropEvent)(struct QTextEdit_VTable* vtbl, QTextEdit* self, QDropEvent* e);
	void (*focusInEvent)(struct QTextEdit_VTable* vtbl, QTextEdit* self, QFocusEvent* e);
	void (*focusOutEvent)(struct QTextEdit_VTable* vtbl, QTextEdit* self, QFocusEvent* e);
	void (*showEvent)(struct QTextEdit_VTable* vtbl, QTextEdit* self, QShowEvent* param1);
	void (*changeEvent)(struct QTextEdit_VTable* vtbl, QTextEdit* self, QEvent* e);
	void (*wheelEvent)(struct QTextEdit_VTable* vtbl, QTextEdit* self, QWheelEvent* e);
	QMimeData* (*createMimeDataFromSelection)(struct QTextEdit_VTable* vtbl, const QTextEdit* self);
	bool (*canInsertFromMimeData)(struct QTextEdit_VTable* vtbl, const QTextEdit* self, QMimeData* source);
	void (*insertFromMimeData)(struct QTextEdit_VTable* vtbl, QTextEdit* self, QMimeData* source);
	void (*inputMethodEvent)(struct QTextEdit_VTable* vtbl, QTextEdit* self, QInputMethodEvent* param1);
	void (*scrollContentsBy)(struct QTextEdit_VTable* vtbl, QTextEdit* self, int dx, int dy);
	void (*doSetTextCursor)(struct QTextEdit_VTable* vtbl, QTextEdit* self, QTextCursor* cursor);
	QSize* (*minimumSizeHint)(struct QTextEdit_VTable* vtbl, const QTextEdit* self);
	QSize* (*sizeHint)(struct QTextEdit_VTable* vtbl, const QTextEdit* self);
	void (*setupViewport)(struct QTextEdit_VTable* vtbl, QTextEdit* self, QWidget* viewport);
	bool (*eventFilter)(struct QTextEdit_VTable* vtbl, QTextEdit* self, QObject* param1, QEvent* param2);
	bool (*viewportEvent)(struct QTextEdit_VTable* vtbl, QTextEdit* self, QEvent* param1);
	QSize* (*viewportSizeHint)(struct QTextEdit_VTable* vtbl, const QTextEdit* self);
	int (*devType)(struct QTextEdit_VTable* vtbl, const QTextEdit* self);
	void (*setVisible)(struct QTextEdit_VTable* vtbl, QTextEdit* self, bool visible);
	int (*heightForWidth)(struct QTextEdit_VTable* vtbl, const QTextEdit* self, int param1);
	bool (*hasHeightForWidth)(struct QTextEdit_VTable* vtbl, const QTextEdit* self);
	QPaintEngine* (*paintEngine)(struct QTextEdit_VTable* vtbl, const QTextEdit* self);
	void (*enterEvent)(struct QTextEdit_VTable* vtbl, QTextEdit* self, QEvent* event);
	void (*leaveEvent)(struct QTextEdit_VTable* vtbl, QTextEdit* self, QEvent* event);
	void (*moveEvent)(struct QTextEdit_VTable* vtbl, QTextEdit* self, QMoveEvent* event);
	void (*closeEvent)(struct QTextEdit_VTable* vtbl, QTextEdit* self, QCloseEvent* event);
	void (*tabletEvent)(struct QTextEdit_VTable* vtbl, QTextEdit* self, QTabletEvent* event);
	void (*actionEvent)(struct QTextEdit_VTable* vtbl, QTextEdit* self, QActionEvent* event);
	void (*hideEvent)(struct QTextEdit_VTable* vtbl, QTextEdit* self, QHideEvent* event);
	bool (*nativeEvent)(struct QTextEdit_VTable* vtbl, QTextEdit* self, struct miqt_string eventType, void* message, long* result);
	int (*metric)(struct QTextEdit_VTable* vtbl, const QTextEdit* self, int param1);
	void (*initPainter)(struct QTextEdit_VTable* vtbl, const QTextEdit* self, QPainter* painter);
	QPaintDevice* (*redirected)(struct QTextEdit_VTable* vtbl, const QTextEdit* self, QPoint* offset);
	QPainter* (*sharedPainter)(struct QTextEdit_VTable* vtbl, const QTextEdit* self);
	void (*childEvent)(struct QTextEdit_VTable* vtbl, QTextEdit* self, QChildEvent* event);
	void (*customEvent)(struct QTextEdit_VTable* vtbl, QTextEdit* self, QEvent* event);
	void (*connectNotify)(struct QTextEdit_VTable* vtbl, QTextEdit* self, QMetaMethod* signal);
	void (*disconnectNotify)(struct QTextEdit_VTable* vtbl, QTextEdit* self, QMetaMethod* signal);
};
QTextEdit* QTextEdit_new(struct QTextEdit_VTable* vtbl, QWidget* parent);
QTextEdit* QTextEdit_new2(struct QTextEdit_VTable* vtbl);
QTextEdit* QTextEdit_new3(struct QTextEdit_VTable* vtbl, struct miqt_string text);
QTextEdit* QTextEdit_new4(struct QTextEdit_VTable* vtbl, struct miqt_string text, QWidget* parent);
void QTextEdit_virtbase(QTextEdit* src, QAbstractScrollArea** outptr_QAbstractScrollArea);
QMetaObject* QTextEdit_metaObject(const QTextEdit* self);
void* QTextEdit_metacast(QTextEdit* self, const char* param1);
int QTextEdit_metacall(QTextEdit* self, int param1, int param2, void** param3);
struct miqt_string QTextEdit_tr(const char* s);
struct miqt_string QTextEdit_trUtf8(const char* s);
void QTextEdit_setDocument(QTextEdit* self, QTextDocument* document);
QTextDocument* QTextEdit_document(const QTextEdit* self);
void QTextEdit_setPlaceholderText(QTextEdit* self, struct miqt_string placeholderText);
struct miqt_string QTextEdit_placeholderText(const QTextEdit* self);
void QTextEdit_setTextCursor(QTextEdit* self, QTextCursor* cursor);
QTextCursor* QTextEdit_textCursor(const QTextEdit* self);
bool QTextEdit_isReadOnly(const QTextEdit* self);
void QTextEdit_setReadOnly(QTextEdit* self, bool ro);
void QTextEdit_setTextInteractionFlags(QTextEdit* self, int flags);
int QTextEdit_textInteractionFlags(const QTextEdit* self);
double QTextEdit_fontPointSize(const QTextEdit* self);
struct miqt_string QTextEdit_fontFamily(const QTextEdit* self);
int QTextEdit_fontWeight(const QTextEdit* self);
bool QTextEdit_fontUnderline(const QTextEdit* self);
bool QTextEdit_fontItalic(const QTextEdit* self);
QColor* QTextEdit_textColor(const QTextEdit* self);
QColor* QTextEdit_textBackgroundColor(const QTextEdit* self);
QFont* QTextEdit_currentFont(const QTextEdit* self);
int QTextEdit_alignment(const QTextEdit* self);
void QTextEdit_mergeCurrentCharFormat(QTextEdit* self, QTextCharFormat* modifier);
void QTextEdit_setCurrentCharFormat(QTextEdit* self, QTextCharFormat* format);
QTextCharFormat* QTextEdit_currentCharFormat(const QTextEdit* self);
int QTextEdit_autoFormatting(const QTextEdit* self);
void QTextEdit_setAutoFormatting(QTextEdit* self, int features);
bool QTextEdit_tabChangesFocus(const QTextEdit* self);
void QTextEdit_setTabChangesFocus(QTextEdit* self, bool b);
void QTextEdit_setDocumentTitle(QTextEdit* self, struct miqt_string title);
struct miqt_string QTextEdit_documentTitle(const QTextEdit* self);
bool QTextEdit_isUndoRedoEnabled(const QTextEdit* self);
void QTextEdit_setUndoRedoEnabled(QTextEdit* self, bool enable);
int QTextEdit_lineWrapMode(const QTextEdit* self);
void QTextEdit_setLineWrapMode(QTextEdit* self, int mode);
int QTextEdit_lineWrapColumnOrWidth(const QTextEdit* self);
void QTextEdit_setLineWrapColumnOrWidth(QTextEdit* self, int w);
int QTextEdit_wordWrapMode(const QTextEdit* self);
void QTextEdit_setWordWrapMode(QTextEdit* self, int policy);
bool QTextEdit_find(QTextEdit* self, struct miqt_string exp);
bool QTextEdit_findWithExp(QTextEdit* self, QRegExp* exp);
bool QTextEdit_find2(QTextEdit* self, QRegularExpression* exp);
struct miqt_string QTextEdit_toPlainText(const QTextEdit* self);
struct miqt_string QTextEdit_toHtml(const QTextEdit* self);
struct miqt_string QTextEdit_toMarkdown(const QTextEdit* self);
void QTextEdit_ensureCursorVisible(QTextEdit* self);
QVariant* QTextEdit_loadResource(QTextEdit* self, int type, QUrl* name);
QMenu* QTextEdit_createStandardContextMenu(QTextEdit* self);
QMenu* QTextEdit_createStandardContextMenuWithPosition(QTextEdit* self, QPoint* position);
QTextCursor* QTextEdit_cursorForPosition(const QTextEdit* self, QPoint* pos);
QRect* QTextEdit_cursorRect(const QTextEdit* self, QTextCursor* cursor);
QRect* QTextEdit_cursorRect2(const QTextEdit* self);
struct miqt_string QTextEdit_anchorAt(const QTextEdit* self, QPoint* pos);
bool QTextEdit_overwriteMode(const QTextEdit* self);
void QTextEdit_setOverwriteMode(QTextEdit* self, bool overwrite);
int QTextEdit_tabStopWidth(const QTextEdit* self);
void QTextEdit_setTabStopWidth(QTextEdit* self, int width);
double QTextEdit_tabStopDistance(const QTextEdit* self);
void QTextEdit_setTabStopDistance(QTextEdit* self, double distance);
int QTextEdit_cursorWidth(const QTextEdit* self);
void QTextEdit_setCursorWidth(QTextEdit* self, int width);
bool QTextEdit_acceptRichText(const QTextEdit* self);
void QTextEdit_setAcceptRichText(QTextEdit* self, bool accept);
void QTextEdit_setExtraSelections(QTextEdit* self, struct miqt_array /* of QTextEdit__ExtraSelection* */  selections);
struct miqt_array /* of QTextEdit__ExtraSelection* */  QTextEdit_extraSelections(const QTextEdit* self);
void QTextEdit_moveCursor(QTextEdit* self, int operation);
bool QTextEdit_canPaste(const QTextEdit* self);
void QTextEdit_print(const QTextEdit* self, QPagedPaintDevice* printer);
QVariant* QTextEdit_inputMethodQuery(const QTextEdit* self, int property);
QVariant* QTextEdit_inputMethodQuery2(const QTextEdit* self, int query, QVariant* argument);
void QTextEdit_setFontPointSize(QTextEdit* self, double s);
void QTextEdit_setFontFamily(QTextEdit* self, struct miqt_string fontFamily);
void QTextEdit_setFontWeight(QTextEdit* self, int w);
void QTextEdit_setFontUnderline(QTextEdit* self, bool b);
void QTextEdit_setFontItalic(QTextEdit* self, bool b);
void QTextEdit_setTextColor(QTextEdit* self, QColor* c);
void QTextEdit_setTextBackgroundColor(QTextEdit* self, QColor* c);
void QTextEdit_setCurrentFont(QTextEdit* self, QFont* f);
void QTextEdit_setAlignment(QTextEdit* self, int a);
void QTextEdit_setPlainText(QTextEdit* self, struct miqt_string text);
void QTextEdit_setHtml(QTextEdit* self, struct miqt_string text);
void QTextEdit_setMarkdown(QTextEdit* self, struct miqt_string markdown);
void QTextEdit_setText(QTextEdit* self, struct miqt_string text);
void QTextEdit_cut(QTextEdit* self);
void QTextEdit_copy(QTextEdit* self);
void QTextEdit_paste(QTextEdit* self);
void QTextEdit_undo(QTextEdit* self);
void QTextEdit_redo(QTextEdit* self);
void QTextEdit_clear(QTextEdit* self);
void QTextEdit_selectAll(QTextEdit* self);
void QTextEdit_insertPlainText(QTextEdit* self, struct miqt_string text);
void QTextEdit_insertHtml(QTextEdit* self, struct miqt_string text);
void QTextEdit_append(QTextEdit* self, struct miqt_string text);
void QTextEdit_scrollToAnchor(QTextEdit* self, struct miqt_string name);
void QTextEdit_zoomIn(QTextEdit* self);
void QTextEdit_zoomOut(QTextEdit* self);
void QTextEdit_textChanged(QTextEdit* self);
void QTextEdit_connect_textChanged(QTextEdit* self, intptr_t slot, void (*callback)(intptr_t), void (*release)(intptr_t));
void QTextEdit_undoAvailable(QTextEdit* self, bool b);
void QTextEdit_connect_undoAvailable(QTextEdit* self, intptr_t slot, void (*callback)(intptr_t, bool), void (*release)(intptr_t));
void QTextEdit_redoAvailable(QTextEdit* self, bool b);
void QTextEdit_connect_redoAvailable(QTextEdit* self, intptr_t slot, void (*callback)(intptr_t, bool), void (*release)(intptr_t));
void QTextEdit_currentCharFormatChanged(QTextEdit* self, QTextCharFormat* format);
void QTextEdit_connect_currentCharFormatChanged(QTextEdit* self, intptr_t slot, void (*callback)(intptr_t, QTextCharFormat*), void (*release)(intptr_t));
void QTextEdit_copyAvailable(QTextEdit* self, bool b);
void QTextEdit_connect_copyAvailable(QTextEdit* self, intptr_t slot, void (*callback)(intptr_t, bool), void (*release)(intptr_t));
void QTextEdit_selectionChanged(QTextEdit* self);
void QTextEdit_connect_selectionChanged(QTextEdit* self, intptr_t slot, void (*callback)(intptr_t), void (*release)(intptr_t));
void QTextEdit_cursorPositionChanged(QTextEdit* self);
void QTextEdit_connect_cursorPositionChanged(QTextEdit* self, intptr_t slot, void (*callback)(intptr_t), void (*release)(intptr_t));
bool QTextEdit_event(QTextEdit* self, QEvent* e);
void QTextEdit_timerEvent(QTextEdit* self, QTimerEvent* e);
void QTextEdit_keyPressEvent(QTextEdit* self, QKeyEvent* e);
void QTextEdit_keyReleaseEvent(QTextEdit* self, QKeyEvent* e);
void QTextEdit_resizeEvent(QTextEdit* self, QResizeEvent* e);
void QTextEdit_paintEvent(QTextEdit* self, QPaintEvent* e);
void QTextEdit_mousePressEvent(QTextEdit* self, QMouseEvent* e);
void QTextEdit_mouseMoveEvent(QTextEdit* self, QMouseEvent* e);
void QTextEdit_mouseReleaseEvent(QTextEdit* self, QMouseEvent* e);
void QTextEdit_mouseDoubleClickEvent(QTextEdit* self, QMouseEvent* e);
bool QTextEdit_focusNextPrevChild(QTextEdit* self, bool next);
void QTextEdit_contextMenuEvent(QTextEdit* self, QContextMenuEvent* e);
void QTextEdit_dragEnterEvent(QTextEdit* self, QDragEnterEvent* e);
void QTextEdit_dragLeaveEvent(QTextEdit* self, QDragLeaveEvent* e);
void QTextEdit_dragMoveEvent(QTextEdit* self, QDragMoveEvent* e);
void QTextEdit_dropEvent(QTextEdit* self, QDropEvent* e);
void QTextEdit_focusInEvent(QTextEdit* self, QFocusEvent* e);
void QTextEdit_focusOutEvent(QTextEdit* self, QFocusEvent* e);
void QTextEdit_showEvent(QTextEdit* self, QShowEvent* param1);
void QTextEdit_changeEvent(QTextEdit* self, QEvent* e);
void QTextEdit_wheelEvent(QTextEdit* self, QWheelEvent* e);
QMimeData* QTextEdit_createMimeDataFromSelection(const QTextEdit* self);
bool QTextEdit_canInsertFromMimeData(const QTextEdit* self, QMimeData* source);
void QTextEdit_insertFromMimeData(QTextEdit* self, QMimeData* source);
void QTextEdit_inputMethodEvent(QTextEdit* self, QInputMethodEvent* param1);
void QTextEdit_scrollContentsBy(QTextEdit* self, int dx, int dy);
void QTextEdit_doSetTextCursor(QTextEdit* self, QTextCursor* cursor);
struct miqt_string QTextEdit_tr2(const char* s, const char* c);
struct miqt_string QTextEdit_tr3(const char* s, const char* c, int n);
struct miqt_string QTextEdit_trUtf82(const char* s, const char* c);
struct miqt_string QTextEdit_trUtf83(const char* s, const char* c, int n);
bool QTextEdit_find22(QTextEdit* self, struct miqt_string exp, int options);
bool QTextEdit_find23(QTextEdit* self, QRegExp* exp, int options);
bool QTextEdit_find24(QTextEdit* self, QRegularExpression* exp, int options);
struct miqt_string QTextEdit_toMarkdown1(const QTextEdit* self, int features);
void QTextEdit_moveCursor2(QTextEdit* self, int operation, int mode);
void QTextEdit_zoomIn1(QTextEdit* self, int range);
void QTextEdit_zoomOut1(QTextEdit* self, int range);
QMetaObject* QTextEdit_virtualbase_metaObject(const void* self);
void* QTextEdit_virtualbase_metacast(void* self, const char* param1);
int QTextEdit_virtualbase_metacall(void* self, int param1, int param2, void** param3);
QVariant* QTextEdit_virtualbase_loadResource(void* self, int type, QUrl* name);
QVariant* QTextEdit_virtualbase_inputMethodQuery(const void* self, int property);
bool QTextEdit_virtualbase_event(void* self, QEvent* e);
void QTextEdit_virtualbase_timerEvent(void* self, QTimerEvent* e);
void QTextEdit_virtualbase_keyPressEvent(void* self, QKeyEvent* e);
void QTextEdit_virtualbase_keyReleaseEvent(void* self, QKeyEvent* e);
void QTextEdit_virtualbase_resizeEvent(void* self, QResizeEvent* e);
void QTextEdit_virtualbase_paintEvent(void* self, QPaintEvent* e);
void QTextEdit_virtualbase_mousePressEvent(void* self, QMouseEvent* e);
void QTextEdit_virtualbase_mouseMoveEvent(void* self, QMouseEvent* e);
void QTextEdit_virtualbase_mouseReleaseEvent(void* self, QMouseEvent* e);
void QTextEdit_virtualbase_mouseDoubleClickEvent(void* self, QMouseEvent* e);
bool QTextEdit_virtualbase_focusNextPrevChild(void* self, bool next);
void QTextEdit_virtualbase_contextMenuEvent(void* self, QContextMenuEvent* e);
void QTextEdit_virtualbase_dragEnterEvent(void* self, QDragEnterEvent* e);
void QTextEdit_virtualbase_dragLeaveEvent(void* self, QDragLeaveEvent* e);
void QTextEdit_virtualbase_dragMoveEvent(void* self, QDragMoveEvent* e);
void QTextEdit_virtualbase_dropEvent(void* self, QDropEvent* e);
void QTextEdit_virtualbase_focusInEvent(void* self, QFocusEvent* e);
void QTextEdit_virtualbase_focusOutEvent(void* self, QFocusEvent* e);
void QTextEdit_virtualbase_showEvent(void* self, QShowEvent* param1);
void QTextEdit_virtualbase_changeEvent(void* self, QEvent* e);
void QTextEdit_virtualbase_wheelEvent(void* self, QWheelEvent* e);
QMimeData* QTextEdit_virtualbase_createMimeDataFromSelection(const void* self);
bool QTextEdit_virtualbase_canInsertFromMimeData(const void* self, QMimeData* source);
void QTextEdit_virtualbase_insertFromMimeData(void* self, QMimeData* source);
void QTextEdit_virtualbase_inputMethodEvent(void* self, QInputMethodEvent* param1);
void QTextEdit_virtualbase_scrollContentsBy(void* self, int dx, int dy);
void QTextEdit_virtualbase_doSetTextCursor(void* self, QTextCursor* cursor);
QSize* QTextEdit_virtualbase_minimumSizeHint(const void* self);
QSize* QTextEdit_virtualbase_sizeHint(const void* self);
void QTextEdit_virtualbase_setupViewport(void* self, QWidget* viewport);
bool QTextEdit_virtualbase_eventFilter(void* self, QObject* param1, QEvent* param2);
bool QTextEdit_virtualbase_viewportEvent(void* self, QEvent* param1);
QSize* QTextEdit_virtualbase_viewportSizeHint(const void* self);
int QTextEdit_virtualbase_devType(const void* self);
void QTextEdit_virtualbase_setVisible(void* self, bool visible);
int QTextEdit_virtualbase_heightForWidth(const void* self, int param1);
bool QTextEdit_virtualbase_hasHeightForWidth(const void* self);
QPaintEngine* QTextEdit_virtualbase_paintEngine(const void* self);
void QTextEdit_virtualbase_enterEvent(void* self, QEvent* event);
void QTextEdit_virtualbase_leaveEvent(void* self, QEvent* event);
void QTextEdit_virtualbase_moveEvent(void* self, QMoveEvent* event);
void QTextEdit_virtualbase_closeEvent(void* self, QCloseEvent* event);
void QTextEdit_virtualbase_tabletEvent(void* self, QTabletEvent* event);
void QTextEdit_virtualbase_actionEvent(void* self, QActionEvent* event);
void QTextEdit_virtualbase_hideEvent(void* self, QHideEvent* event);
bool QTextEdit_virtualbase_nativeEvent(void* self, struct miqt_string eventType, void* message, long* result);
int QTextEdit_virtualbase_metric(const void* self, int param1);
void QTextEdit_virtualbase_initPainter(const void* self, QPainter* painter);
QPaintDevice* QTextEdit_virtualbase_redirected(const void* self, QPoint* offset);
QPainter* QTextEdit_virtualbase_sharedPainter(const void* self);
void QTextEdit_virtualbase_childEvent(void* self, QChildEvent* event);
void QTextEdit_virtualbase_customEvent(void* self, QEvent* event);
void QTextEdit_virtualbase_connectNotify(void* self, QMetaMethod* signal);
void QTextEdit_virtualbase_disconnectNotify(void* self, QMetaMethod* signal);
void QTextEdit_protectedbase_zoomInF(bool* _dynamic_cast_ok, void* self, float range);
void QTextEdit_protectedbase_setViewportMargins(bool* _dynamic_cast_ok, void* self, int left, int top, int right, int bottom);
QMargins* QTextEdit_protectedbase_viewportMargins(bool* _dynamic_cast_ok, const void* self);
void QTextEdit_protectedbase_drawFrame(bool* _dynamic_cast_ok, void* self, QPainter* param1);
void QTextEdit_protectedbase_initStyleOption(bool* _dynamic_cast_ok, const void* self, QStyleOptionFrame* option);
void QTextEdit_protectedbase_updateMicroFocus(bool* _dynamic_cast_ok, void* self);
void QTextEdit_protectedbase_create(bool* _dynamic_cast_ok, void* self);
void QTextEdit_protectedbase_destroy(bool* _dynamic_cast_ok, void* self);
bool QTextEdit_protectedbase_focusNextChild(bool* _dynamic_cast_ok, void* self);
bool QTextEdit_protectedbase_focusPreviousChild(bool* _dynamic_cast_ok, void* self);
QObject* QTextEdit_protectedbase_sender(bool* _dynamic_cast_ok, const void* self);
int QTextEdit_protectedbase_senderSignalIndex(bool* _dynamic_cast_ok, const void* self);
int QTextEdit_protectedbase_receivers(bool* _dynamic_cast_ok, const void* self, const char* signal);
bool QTextEdit_protectedbase_isSignalConnected(bool* _dynamic_cast_ok, const void* self, QMetaMethod* signal);
const QMetaObject* QTextEdit_staticMetaObject();
void QTextEdit_delete(QTextEdit* self);

QTextEdit__ExtraSelection* QTextEdit__ExtraSelection_new(QTextEdit__ExtraSelection* param1);
void QTextEdit__ExtraSelection_operatorAssign(QTextEdit__ExtraSelection* self, QTextEdit__ExtraSelection* param1);
void QTextEdit__ExtraSelection_delete(QTextEdit__ExtraSelection* self);

#ifdef __cplusplus
} /* extern C */
#endif

#endif
